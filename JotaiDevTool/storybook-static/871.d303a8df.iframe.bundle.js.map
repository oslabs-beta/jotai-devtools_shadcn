{"version":3,"file":"871.d303a8df.iframe.bundle.js","mappings":";;;;;;;AAgBA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;ACvCA","sources":["webpack://jotai-devtools/./src/DevTools/fonts/fonts.ts","webpack://jotai-devtools/./src/DevTools/DevTools.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport inter700 from './files/Inter-Bold.woff2';\nimport inter500 from './files/Inter-Medium.woff2';\nimport inter400 from './files/Inter-Regular.woff2';\nimport inter600 from './files/Inter-SemiBold.woff2';\nimport jetbrainsMono700 from './files/JetBrainsMono-Bold.woff2';\nimport jetbrainsMono400 from './files/JetBrainsMono-Regular.woff2';\nimport jetbrainsMono600 from './files/JetBrainsMono-SemiBold.woff2';\n\nexport const fontCss = css`\n  @font-face {\n    /* inter-latin-400-normal*/\n    font-family: 'Inter';\n    font-style: normal;\n    font-display: swap;\n    font-weight: 400;\n    src: url('${inter400}') format('woff2');\n  }\n\n  @font-face {\n    /* inter-latin-500-normal*/\n    font-family: 'Inter';\n    font-style: normal;\n    font-display: swap;\n    font-weight: 500;\n    src: url('${inter500}') format('woff2');\n  }\n\n  @font-face {\n    /* inter-latin-600-normal*/\n    font-family: 'Inter';\n    font-style: normal;\n    font-display: swap;\n    font-weight: 600;\n    src: url('${inter600}') format('woff2');\n  }\n\n  @font-face {\n    font-family: 'Inter';\n    font-style: normal;\n    font-display: swap;\n    font-weight: 700;\n    src: url('${inter700}') format('woff2');\n  }\n\n  @font-face {\n    /* jetbrains-mono-latin-400-normal*/\n    font-family: 'JetBrains Mono';\n    font-style: normal;\n    font-display: swap;\n    font-weight: 400;\n    src: url('${jetbrainsMono400}') format('woff2');\n  }\n\n  @font-face {\n    /* jetbrains-mono-latin-600-normal*/\n    font-family: 'JetBrains Mono';\n    font-style: normal;\n    font-display: swap;\n    font-weight: 600;\n    src: url('${jetbrainsMono600}') format('woff2');\n  }\n\n  @font-face {\n    /* jetbrains-mono-latin-700-normal*/\n    font-family: 'JetBrains Mono';\n    font-style: normal;\n    font-display: swap;\n    font-weight: 700;\n    src: url('${jetbrainsMono700}') format('woff2');\n  }\n`;\n","import * as React from 'react';\nimport { EmotionCache, Global } from '@emotion/react';\nimport {\n  ColorScheme,\n  ColorSchemeProvider,\n  MantineProvider,\n  MantineThemeOverride,\n} from '@mantine/core';\nimport { createStore } from 'jotai/vanilla';\nimport { Store } from 'src/types';\nimport {\n  DevToolsOptions,\n  useSetDevToolsOptions,\n} from './atoms/devtools-options';\nimport {\n  Extension,\n  ExtensionProps,\n  shellTriggerButtonClassName,\n} from './Extension';\nimport { fontCss } from './fonts';\nimport { InternalDevToolsContext } from './internal-jotai-store';\nimport { createMemoizedEmotionCache } from './utils';\n\nexport type DevToolsProps = ExtensionProps & {\n  theme?: 'dark' | 'light';\n  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n  nonce?: string;\n  options?: DevToolsOptions;\n};\n\nconst DevToolsMain = ({\n  store,\n  isInitialOpen = false,\n  theme: userColorScheme = 'light',\n  position = 'bottom-left',\n  nonce,\n  options,\n}: DevToolsProps): JSX.Element => {\n  const [colorScheme, setColorScheme] =\n    React.useState<ColorScheme>(userColorScheme);\n  const setDevToolsOptions = useSetDevToolsOptions();\n\n  const toggleColorScheme = (value?: ColorScheme) =>\n    setColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));\n\n  const jotaiDevtoolsEmotionCache = React.useRef<EmotionCache>();\n\n  if (!jotaiDevtoolsEmotionCache.current) {\n    jotaiDevtoolsEmotionCache.current = createMemoizedEmotionCache(nonce)();\n  }\n\n  React.useEffect(() => {\n    setColorScheme(userColorScheme);\n  }, [userColorScheme]);\n\n  React.useEffect(() => {\n    // Should we consider caching these options in the future instead of allowing users to change these?\n    setDevToolsOptions(options);\n  }, [setDevToolsOptions, options]);\n\n  const theme: MantineThemeOverride = React.useMemo(() => {\n    return {\n      primaryColor: 'dark',\n      activeStyles: { transform: 'scale(1)' },\n      fontFamily: 'Inter, -apple-system, BlinkMacSystemFont, Segoe, sans-serif',\n      fontFamilyMonospace:\n        'JetBrains Mono, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace',\n      headings: {\n        fontFamily:\n          'Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji',\n      },\n      defaultRadius: 'md',\n      globalStyles: (theme) => ({\n        '.jotai-devtools-shell': {\n          '*, *::before, *::after': {\n            boxSizing: 'border-box',\n          },\n          ...theme.fn.fontStyles(),\n          color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n          lineHeight: theme.lineHeight,\n          WebkitFontSmoothing: 'antialiased',\n          MozOsxFontSmoothing: 'grayscale',\n          fontSize: theme.fontSizes.md,\n        },\n        [`.${shellTriggerButtonClassName}`]: {\n          position: 'fixed',\n          borderRadius: '50%',\n          borderWidth: 0,\n          width: '4rem',\n          height: '4rem',\n          zIndex: 99999,\n          img: {\n            height: '2rem',\n          },\n          left: position.includes('left') ? '0.2rem' : 'unset',\n          right: position.includes('right') ? '0.2rem' : 'unset',\n          top: position.includes('top') ? '0.2rem' : 'unset',\n          bottom: position.includes('bottom') ? '0.2rem' : 'unset',\n        },\n      }),\n      colorScheme,\n    };\n  }, [colorScheme, position]);\n\n  return (\n    <React.StrictMode>\n      <ColorSchemeProvider\n        colorScheme={colorScheme}\n        toggleColorScheme={toggleColorScheme}\n      >\n        <MantineProvider\n          theme={theme}\n          emotionCache={jotaiDevtoolsEmotionCache.current}\n        >\n          <Global styles={fontCss} />\n          <Extension store={store} isInitialOpen={isInitialOpen} />\n        </MantineProvider>\n      </ColorSchemeProvider>\n    </React.StrictMode>\n  );\n};\n\nconst DevToolsProvider = ({ children }: React.PropsWithChildren) => {\n  const internalStoreRef = React.useRef<Store>();\n\n  if (!internalStoreRef.current) {\n    internalStoreRef.current = createStore();\n  }\n\n  return (\n    <InternalDevToolsContext.Provider value={internalStoreRef.current}>\n      {children}\n    </InternalDevToolsContext.Provider>\n  );\n};\n\nexport const InternalDevTools = (props: DevToolsProps): JSX.Element | null => {\n  if (__DEV__) {\n    return (\n      <DevToolsProvider>\n        <DevToolsMain {...props} />\n      </DevToolsProvider>\n    );\n  }\n\n  return <></>;\n};\n"],"names":[],"sourceRoot":""}